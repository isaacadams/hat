name: rust-binaries

on:
  workflow_call:
    inputs:
      name:
        description: 'name of the CLI'
        required: true
        type: string
        default: hat
      version:
        description: 'the version being built'
        required: true
        type: string
        default: ''
  push:
    branches:
      - 'try-build-*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUSTFLAGS: -D warnings

jobs:
  create-binaries:
    name: create-binaries
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            cross: false
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      BUILD_FLAGS: '--verbose --release'
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: target
    steps:
      - uses: actions/checkout@v3

      - name: tool dependencies (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          if ! command -V sudo; then
            apt-get update
            apt-get install -y --no-install-recommends sudo
          fi
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            asciidoctor \
            zsh xz-utils liblz4-tool musl-tools \
            brotli zstd

      - name: install cargo
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: use cross
        if: ${{ matrix.cross }}
        shell: bash
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "BUILD_FLAGS=--target ${{ matrix.target }} ${{ env.BUILD_FLAGS }}" >> $GITHUB_ENV
          echo "TARGET_DIR=target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: echo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "build flag(s): ${{ env.BUILD_FLAGS }}"

      - name: cargo build
        run: ${{ env.CARGO }} build ${{ env.BUILD_FLAGS }}

      - name: archive
        shell: bash
        run: |
          package="${{ inputs.name }}-${{ inputs.version }}-${{ matrix.target }}"
          echo "PACKAGE=$package" >> $GITHUB_ENV
          mkdir -p "$package"

          ls
          ls target/**
          cp README.md "$package/"

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "${{ env.TARGET_DIR }}/release/${{ inputs.name }}.exe" "$package/"
            7z a "$package.zip" "$package"
            echo "ASSET=$package.zip" >> $GITHUB_ENV
          else
            cp "${{ env.TARGET_DIR }}/release/${{ inputs.name }}" "$package/"
            tar czf "$package.tar.gz" "$package"
            echo "ASSET=$package.tar.gz" >> $GITHUB_ENV
          fi

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE }}
          path: ${{ env.ASSET }}
